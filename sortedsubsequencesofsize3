// { Driver Code Starts
#include <bits/stdc++.h>

using namespace std;

bool isSubSequence(vector<int> &v1, vector<int> &v2, int n, int m) {

    if (m == 0) return true;
    if (n == 0) return false;

    if (v1[n - 1] == v2[m - 1]) return isSubSequence(v1, v2, n - 1, m - 1);

    return isSubSequence(v1, v2, n - 1, m);
}


 // } Driver Code Ends
/*The function returns a vector containing the
increasing sub-sequence of length 3 if present
else returns an empty vector */
class Solution{
  public:
    vector<int> find3Numbers(vector<int> arr, int N)
    {
        int n=arr.size();
        vector<int>left;
        vector<int>right;
        stack<int>st;
        for(int i=0;i<n;i++)
        {
            if(st.size()==0)
            left.push_back(-1);
            else if(!st.empty()&&arr[st.top()]<arr[i])
            {
                left.push_back(st.top());
            }
            else if(!st.empty()&&arr[st.top()]>=arr[i])
            {
                while(!st.empty()&&arr[st.top()]>=arr[i])
                st.pop();
                if(st.size()==0)
                left.push_back(-1);
                else
                left.push_back(st.top());
            }
            st.push(i);
        }
       
        while(!st.empty())
        {
            st.pop();
        }
        for(int i=n-1;i>=0;i--)
        {
            if(st.size()==0)
            right.push_back(-1);
            else if(!st.empty()&&arr[st.top()]>arr[i])
            right.push_back(st.top());
            else if(!st.empty()&&arr[i]>=arr[st.top()])
            {
                while(!st.empty()&&arr[i]>=arr[st.top()])
                {
                    st.pop();
                    
                }
                if(st.size()==0)
                right.push_back(-1);
                else
                right.push_back(st.top());
            }
            st.push(i);
            
        }
         reverse(right.begin(),right.end());
         vector<int>ans;
         bool flag=false;
         for(int i=0;i<n;i++)
         {
             if(left[i]!=-1&&right[i]!=-1)
             {
                 if(left[i]<i&&i<right[i])
                 {
                     ans.push_back(arr[left[i]]);
                     ans.push_back(arr[i]);
                     ans.push_back(arr[right[i]]);
                     flag=true;
                     break;
                 }
             }
         }
        //  if(flag==false)
        //  return ans;
        //  for(int i=0;i<n;i++)
        //  cout<<left[i]<<" ";
        //  cout<<endl;
        //  for(int i=0;i<n;i++)
        //  cout<<right[i]<<" ";
        //  cout<<endl;
         return ans;
        
    }
};

// { Driver Code Starts.

// Driver program to test above function
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<int> a(n);
        for (int i = 0; i < n; i++) cin >> a[i];
        Solution obj;
        auto res = obj.find3Numbers(a, n);

        // wrong format output
        if (!res.empty() and res.size() != 3) {
            cout << -1 << "\n";
        }

        if (res.empty()) {
            cout << 0 << "\n";
        } else if ((res[0] < res[1] and res[1] < res[2]) and
                   isSubSequence(a, res, n, res.size())) {
            cout << 1 << "\n";
        } else {
            cout << -1 << "\n";
        }
    }

    return 0;
}  // } Driver Code Ends